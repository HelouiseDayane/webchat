{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/webchat/front/src/components/AreaAtendente.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AreaAtendente = () => {\n  _s();\n  const [chats, setChats] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:8000/api/mensagens').then(response => {\n      setChats(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  const handleSelecionarChat = id_conversa => {\n    // Aqui você pode implementar a lógica para permitir que o atendente responda ao chat selecionado\n    const resposta = prompt('Digite sua resposta');\n    if (resposta) {\n      axios.post(`http://localhost:8000/api/mensagens/{id_conversa}`, {\n        conteudo: resposta\n      }).then(response => {\n        console.log(response.data); // Exibe a resposta da API (opcional)\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\xC1rea do Atendente\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: chats.map(chat => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelecionarChat(chat.id_conversa),\n          children: chat.titulo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)\n      }, chat.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(AreaAtendente, \"vytB8QcpLWFeZXbb4G/4rqAt8MY=\");\n_c = AreaAtendente;\nexport default AreaAtendente;\nvar _c;\n$RefreshReg$(_c, \"AreaAtendente\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","AreaAtendente","_s","chats","setChats","get","then","response","data","catch","error","console","handleSelecionarChat","id_conversa","resposta","prompt","post","conteudo","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","chat","onClick","titulo","id","_c","$RefreshReg$"],"sources":["/opt/lampp/htdocs/webchat/front/src/components/AreaAtendente.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst AreaAtendente = () => {\n  const [chats, setChats] = useState([]);\n\n  useEffect(() => {\n    axios.get('http://localhost:8000/api/mensagens')\n      .then(response => {\n        setChats(response.data);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, []);\n\n  const handleSelecionarChat = (id_conversa) => {\n    // Aqui você pode implementar a lógica para permitir que o atendente responda ao chat selecionado\n    const resposta = prompt('Digite sua resposta');\n\n    if (resposta) {\n      axios.post(`http://localhost:8000/api/mensagens/{id_conversa}`, {\n        conteudo: resposta,\n      })\n        .then(response => {\n          console.log(response.data); // Exibe a resposta da API (opcional)\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  };\n\n  return (\n    <div>\n      <h1>Área do Atendente</h1>\n      <ul>\n        {chats.map(chat => (\n          <li key={chat.id}>\n            <button onClick={() => handleSelecionarChat(chat.id_conversa)}>\n              {chat.titulo}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default AreaAtendente;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdE,KAAK,CAACO,GAAG,CAAC,qCAAqC,CAAC,CAC7CC,IAAI,CAACC,QAAQ,IAAI;MAChBH,QAAQ,CAACG,QAAQ,CAACC,IAAI,CAAC;IACzB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,oBAAoB,GAAIC,WAAW,IAAK;IAC5C;IACA,MAAMC,QAAQ,GAAGC,MAAM,CAAC,qBAAqB,CAAC;IAE9C,IAAID,QAAQ,EAAE;MACZhB,KAAK,CAACkB,IAAI,CAAE,mDAAkD,EAAE;QAC9DC,QAAQ,EAAEH;MACZ,CAAC,CAAC,CACCR,IAAI,CAACC,QAAQ,IAAI;QAChBI,OAAO,CAACO,GAAG,CAACX,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,CAAC;IACN;EACF,CAAC;EAED,oBACEV,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BvB,OAAA;MAAAmB,QAAA,EACGhB,KAAK,CAACqB,GAAG,CAACC,IAAI,iBACbzB,OAAA;QAAAmB,QAAA,eACEnB,OAAA;UAAQ0B,OAAO,EAAEA,CAAA,KAAMd,oBAAoB,CAACa,IAAI,CAACZ,WAAW,CAAE;UAAAM,QAAA,EAC3DM,IAAI,CAACE;QAAM;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC,GAHFE,IAAI,CAACG,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACrB,EAAA,CA5CID,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AA8CnB,eAAeA,aAAa;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}